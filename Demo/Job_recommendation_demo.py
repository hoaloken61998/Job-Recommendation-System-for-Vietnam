# =======================================================================
#  Job Recommender App for Local Development
# =======================================================================
#
#  Instructions to run locally:
#  1. Save this code as a Python file (e.g., app.py).
#  2. Make sure your data files ('processed_candidate.csv', 'df_job_processed.csv', 'expanded_df.csv')
#     are in the SAME FOLDER as this script.
#  3. Open a terminal or command prompt in that folder.
#  4. Install the required libraries by running:
#     pip install streamlit pandas scikit-learn
#  5. Run the app with the command:
#     streamlit run app.py
#
# =======================================================================

import streamlit as st
import pandas as pd
import traceback

def show_candidate_profile(candidate_id, candidate_df):
    """
    Helper function to display the profile of a selected candidate with a defined layout and Vietnamese labels.
    """
    st.header("üë§ H·ªì s∆° ·ª©ng vi√™n")
    candidate_info = candidate_df[candidate_df['candidate_id'] == candidate_id]

    if candidate_info.empty:
        st.warning("Kh√¥ng t√¨m th·∫•y ·ª©ng vi√™n v·ªõi ID n√†y.")
        return

    # Extract the first row of data
    candidate = candidate_info.iloc[0]

    # Define which columns to display and their Vietnamese labels
    profile_map = {
        'user_name': 'T√™n ·ª©ng vi√™n',
        'desired_job_translated': 'C√¥ng vi·ªác mong mu·ªën',
        'industry': 'Ng√†nh ngh·ªÅ',
        'workplace_desired': 'N∆°i l√†m vi·ªác mong mu·ªën'
    }

    # Create a two-column layout for the profile
    col1, col2 = st.columns(2)
    
    with col1:
        # Display Name and Desired Job
        st.subheader(profile_map['user_name'])
        st.write(candidate.get('user_name', 'N/A'))
        
        st.subheader(profile_map['desired_job_translated'])
        st.write(candidate.get('desired_job_translated', 'N/A'))

    with col2:
        # Display Industry and Workplace
        st.subheader(profile_map['industry'])
        st.write(candidate.get('industry', 'N/A'))

        st.subheader(profile_map['workplace_desired'])
        st.write(candidate.get('workplace_desired', 'N/A'))


def display_recommendations(candidate_id, job_df, expanded_df):
    """
    Helper function to display recommendations with Vietnamese labels and a clickable URL.
    """
    st.header("üìä C√°c c√¥ng vi·ªác ƒë∆∞·ª£c ƒë·ªÅ xu·∫•t")

    # Filter expanded_df for the selected candidate
    recommendations = expanded_df[expanded_df['candidate_id'] == candidate_id]

    if not recommendations.empty:
        # Sort by hybrid_score to get the best recommendations first
        recommendations = recommendations.sort_values(by='hybrid_score', ascending=False)
        # Get the recommended job IDs (which are the indices of the Job df)
        recommended_job_ids = recommendations['expanded_job_id'].tolist()

        # Retrieve job details from the job_df using the indices
        recommended_jobs = job_df.iloc[recommended_job_ids]

        if not recommended_jobs.empty:
            st.write(f"T√¨m th·∫•y {len(recommended_jobs)} c√¥ng vi·ªác ƒë∆∞·ª£c ƒë·ªÅ xu·∫•t.")
            
            # Define which columns to display and their Vietnamese labels
            display_cols = {
                'Job_Name': 'T√™n c√¥ng vi·ªác',
                'Company_name': 'T√™n c√¥ng ty',
                'Location': 'ƒê·ªãa ƒëi·ªÉm',
                'Salary': 'M·ª©c l∆∞∆°ng',
                'URL': 'ƒê∆∞·ªùng d·∫´n'
            }
            
            # Filter for columns that actually exist in the dataframe to avoid errors
            existing_cols = [col for col in display_cols.keys() if col in recommended_jobs.columns]
            
            # Create a new dataframe with only the columns we need
            display_df = recommended_jobs[existing_cols].rename(columns=display_cols)
            
            # Use st.column_config to make the URL column clickable
            st.dataframe(
                display_df,
                column_config={
                    "ƒê∆∞·ªùng d·∫´n": st.column_config.LinkColumn(
                        "Link",
                        display_text="M·ªü trang tuy·ªÉn d·ª•ng"
                    )
                },
                hide_index=True,
                use_container_width=True
            )
        else:
            st.warning("Kh√¥ng th·ªÉ t√¨m th·∫•y th√¥ng tin chi ti·∫øt cho c√°c c√¥ng vi·ªác ƒë∆∞·ª£c ƒë·ªÅ xu·∫•t.")
    else:
        st.warning(f"Kh√¥ng t√¨m th·∫•y ƒë·ªÅ xu·∫•t n√†o cho ·ª©ng vi√™n c√≥ ID: {candidate_id}")


def main():
    """
    Main function to run the Streamlit job recommendation app.
    """
    st.set_page_config(layout="wide", page_title="H·ªá th·ªëng ƒë·ªÅ xu·∫•t vi·ªác l√†m")

    try:
        st.title("üë®‚Äçüíº H·ªá th·ªëng ƒë·ªÅ xu·∫•t vi·ªác l√†m üë©‚Äçüíº")

        # --- Data Loading (Internal) ---
        CANDIDATE_PATH = 'processed_candidate.csv'
        JOB_PATH = 'df_job_processed.csv'
        EXPANDED_PATH = 'expanded_df.csv'

        @st.cache_data
        def load_data(candidate_path, job_path, expanded_path):
            # Load the datasets
            candidate_df = pd.read_csv(candidate_path)
            job_df = pd.read_csv(job_path)
            expanded_df = pd.read_csv(expanded_path)

            # Create 'candidate_id' from the dataframe index
            candidate_df = candidate_df.reset_index().rename(columns={'index': 'candidate_id'})
            
            return candidate_df, job_df, expanded_df

        candidate_df, job_df, expanded_df = load_data(CANDIDATE_PATH, JOB_PATH, EXPANDED_PATH)

        if candidate_df is not None:
            st.sidebar.header("T√¨m ki·∫øm ·ª©ng vi√™n")
            
            # Input field for candidate_id
            with st.sidebar.form("candidate_search_form"):
                candidate_id_input = st.number_input(
                    label="Nh·∫≠p ID ·ª©ng vi√™n:",
                    min_value=0,
                    step=1
                )
                submit_button = st.form_submit_button(label="T√¨m ki·∫øm")

            if submit_button:
                # Show the selected candidate's information
                show_candidate_profile(candidate_id_input, candidate_df)
                
                st.divider() # Visual separator

                # Display the recommendations for that candidate
                display_recommendations(candidate_id_input, job_df, expanded_df)
    
    except FileNotFoundError as e:
        st.error(f"L·ªói: Kh√¥ng t√¨m th·∫•y t·ªáp d·ªØ li·ªáu.")
        st.error(f"Chi ti·∫øt: {e}")
        st.info("Vui l√≤ng ƒë·∫£m b·∫£o c√°c t·ªáp sau n·∫±m trong c√πng m·ªôt th∆∞ m·ª•c v·ªõi t·∫≠p l·ªánh:")
        st.info(f"- {CANDIDATE_PATH}\n- {JOB_PATH}\n- {EXPANDED_PATH}")
    
    except Exception as e:
        st.error("ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën trong ·ª©ng d·ª•ng.")
        st.error(f"Chi ti·∫øt l·ªói: {e}")
        traceback.print_exc()


if __name__ == "__main__":
    main()
